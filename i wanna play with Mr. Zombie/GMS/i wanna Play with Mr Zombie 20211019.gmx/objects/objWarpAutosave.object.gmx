<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWarp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objRoomChanger</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>warpX = 0;
warpY = 0;
roomTo = rTemplate;
text = ""
//image_speed = 0;

if(room == rHub){
    visible = true;
    sprite_index = sprMainHubWarp;
    iconList[0] = sprMainHubWarp;
    iconList[1] = sprJushiWarp;
    iconList[2] = sprRCWarp;
    iconList[3] = sprHallowWarp;
    iconList[4] = sprYolomanyWarp;
    iconList[5] = sprQCWarp;
    iconList[6] = sprRongWarp;
    iconList[7] = sprQianchouBlock;
    spr = noone;   
    exit;
}

switch(scrCheckRoom()){
    case "ebb174": {
        sprite_index = sprEbb174Warp;
        break;
    }
    case "qianchou": {
        sprite_index = sprQianchouWarp;
        break;
    }
    case "sol": {
        sprite_index = sprSolWarp;
        break;
    }
    case "zeroyumemain": {
        sprite_index = sprHallowWarp;
        break;
    }
    case "qinchuinormal": {
        sprite_index = sprQCWarp;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.difficulty &lt; 3)  //make sure we're on a difficulty lower than impossible before autosaving
    global.autosave = true;

switch(scrCheckRoom()){
    case "redcrown": {
        audio_play_sound(sndPortal, 0, false);
        break;
    }
}    
    
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room != rHub){
    draw_self();
    exit;
}
//draw_self();

draw_set_font(fDefault12);

if(room == rHub) {
    if((objHubIcon.icon == 7 and objHubIcon.bgList[7] == bWujian) or (objHubIcon.icon == 6 and objHubIcon.bgList[6] == bRongDayTimeHub) or objHubIcon.icon == 1) {
        draw_set_color(c_black);
        draw_text_ext(x + 16, y - 20, text, 8, -1);
    }
    else {
        draw_set_color(c_white);
        //draw_text_ext(x + 16, y - 12, text, 8, -1);
        draw_text_ext(x + 16, y - 20, text, 8, -1);
        draw_set_color(c_black);
    }
}


draw_set_halign(fa_center);

if(room == rHub) {
    //draw_self();
    //position for showing the objHubIcon.icon    
    if(objHubIcon.icon == 7) {
        switch(objHubIcon.bgList[7]) {
            case bEbb174:
                iconList[7] = sprEbb174Warp;
                break;
            case bQianchou:
                iconList[7] = sprQianchouWarp;
                break;
            case bSolBig:
                iconList[7] = sprSolWarp;
                break;
            case bWujian:
                iconList[7] = sprWujianWarp;
                break;
            case bgMainHub:
                iconList[7] = sprMainHubWarp;
                break;
        }
    }
    
    empty = sprite_index != iconList[1] and
            sprite_index != iconList[2] and
            sprite_index != iconList[3] and
            sprite_index != iconList[4] and
            sprite_index != iconList[5] and
            sprite_index != iconList[6] and
            sprite_index != iconList[7];
            
    if(objHubIcon.icon == 0){
        if(objHubIcon.alpha &gt; 0){
            if(!empty){
                draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,objHubIcon.alpha);
            }
        }
        else{
            draw_sprite_ext(iconList[objHubIcon.icon],image_index,x,y,image_xscale,image_yscale,0,c_white,1);
        }
    }
    else{
        
        if(empty){
            objHubIcon.c = 1
            sprite_index = iconList[objHubIcon.icon];
            spr = iconList[objHubIcon.icon];
        } 
        if(sprite_index != iconList[objHubIcon.icon]){
            
            //transferring from current to new objHubIcon.icon
            if(objHubIcon.timer &lt; 25){
                spr = iconList[objHubIcon.icon];
                //sprite transferring
                draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1-(objHubIcon.timer)/25);
                draw_sprite_ext(spr,image_index,x,y,image_xscale,image_yscale,0,c_white,(objHubIcon.timer)/25);
            }
            else{
                //change sprite_index
                sprite_index = iconList[objHubIcon.icon];
                draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1);
            }
        }
        else{
            if(objHubIcon.timer &gt; 0){
                draw_sprite_ext(spr,image_index,x,y,image_xscale,image_yscale,0,c_white,(objHubIcon.timer)/25);
                draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1-(objHubIcon.timer)/25);
            }
            else{
                //spr = noone;
                if(objHubIcon.alpha &lt; 1){
                    draw_sprite_ext(sprWarp,image_index,x,y,image_xscale,image_yscale,0,c_white, 1 - objHubIcon.alpha);
                    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,objHubIcon.alpha);
                }
                else {
                    draw_sprite_ext(sprWarp,image_index,x,y,image_xscale,image_yscale,0,c_white, 1 - objHubIcon.alpha);
                    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,objHubIcon.alpha);
                }       
            }
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
