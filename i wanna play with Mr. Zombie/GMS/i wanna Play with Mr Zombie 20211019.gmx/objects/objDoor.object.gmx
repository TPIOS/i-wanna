<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDoorClose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>open = 0;
close = 1;

angle = 90;

spd = 1.1;


kid = 0;
ghost = 0;

triggered = 0;
ghostTriggered = 0;

roomTo = room;

//variable for objDoorWarp
w = noone;

warpX = 0;
warpY = 0;



/*
open = 0;
close = 1;

angle = 90;

spd = 1.05;


//dir = 1   opens to right
//dir = -1  opens to left
dir = -1;

//trigger value by player(kid) and ghost
kid = 0;
ghost = 0;

//flag indicating if kid has triggered
triggered = 0;
//flag indicating if ghost has triggered
ghostTriggered = 0;

//while closing create a block to prevent the kid
//from going through
b = instance_create(x - 2, y - 32, objBlock);
b.image_xscale = 3 / 32;
b.image_yscale = 58 / 32;
b.visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord('X'))){
    open = !open;
    close = !close;
}

if(global.trigger[kid] == true &amp;&amp; !triggered){
    open = !open;
    close = !close;
    triggered = 1;
    audio_play_sound(sndGentle, 0,0);
}
if(global.ghostTrigger[ghost] == true &amp;&amp; !ghostTriggered){
    open = !open;
    close = !close;
    spd *= 1.5;
    ghostTriggered = 1;
    audio_play_sound(sndSlam,0,0);
}

/*
///trigger behaviour

if(global.trigger[kid] == true &amp;&amp; !triggered){
    open = !open;
    close = !close;
    triggered = 1;
    audio_play_sound(sndGentle, 0,0);
}
if(global.ghostTrigger[ghost] == true &amp;&amp; !ghostTriggered){
    open = !open;
    close = !close;
    spd *= 1.5;
    ghostTriggered = 1;
    audio_play_sound(sndSlam,0,0);
}


if(!open &amp;&amp; !instance_exists(b)){
    b = instance_create(x - 2, y - 32, objBlock);
    b.image_xscale = 3 / 32;
    b.image_yscale = 58 / 32;
    b.visible = false;
}

if(open){
    if(instance_exists(b)){
        with(b){
            instance_destroy();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
triggered = 0;
ghostTriggered = 0;

k = instance_place(x,y,objPlayer);

if(k != noone){
    if(k.warp == 1){
        angle = 135;
        spd = 1.02;
        
        k.x = x;
        k.y = y + 39;
        
        if(!k.visible)k.visible = 1;
        if(instance_exists(objBow))objBow.visible = 1;
        
        k.warp = 0;
    }
}

//if(objPlayer.warp == 1)angle = 135;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_sprite(sprDoorTop,0,x,y);
draw_sprite(sprDoorLeft,0,x - 15, y);
draw_sprite(sprDoorRight,0,x + 14, y);
*/
draw_rectangle_colour(x - 14, y, x + 13, y + 47, c_black,c_black,c_black,c_black,false);

if(open){
    if(close)close = 0;
    if(angle &lt; 135 &amp;&amp; angle * spd &lt; 135){
        angle = angle * spd;
    }
    else{
        angle = 135;
        if(ghostTriggered){
            spd /= 1.5;
        }
        if(!instance_exists(objDoorWarp)){
            w = instance_create(x,y,objDoorWarp);
            w.roomTo = roomTo;
            w.warpX = warpX;
            w.warpY = warpY;
        }
    }
    draw_sprite(sprDoorTop,0,x,y);
    draw_sprite_ext(sprDoorLeft,0,x - 15,y, (180 - angle) / 90,1,0,c_white,1);
    draw_sprite_ext(sprDoorRight, 0,x + 14,y, (180 - angle) / 90,1,0,c_white,1);
}

if(close){
    if(open)open = 0;
    if(angle &gt; 90 &amp;&amp; angle / spd &gt; 90){angle /= spd;}
    else{
        angle = 90;
        //triggered = 0;
        if(ghostTriggered){
            spd /= 1.5;
        }
        if(instance_exists(w)){
            with(w)instance_destroy();
        }
    }
    draw_sprite(sprDoorTop,0,x,y);
    draw_sprite_ext(sprDoorLeft,0,x - 15,y,(180 - angle) / 90,1,0,c_white,1);
    draw_sprite_ext(sprDoorRight, 0,x+14,y,(180 - angle) / 90,1,0,c_white,1);
}


//draw_sprite_ext(sprite_index, 0, x - lengthdir_x(90,angle),y, (180 - angle)/90,1,0,c_white,1)



/*

//dir = 1 face right
//dir = 0 face left

if(open){
    if(close)close = 0;
    if(angle &lt; 180 &amp;&amp; angle * spd &lt; 180){
        angle = angle * spd;
    }
    else{
        angle = 180;
        //triggered = 0;
        if(ghostTriggered){
            spd /= 1.5;
        }
    }
    if(dir){
        //draw_sprite_ext(sprite_index, 0, x - lengthdir_x(90,angle),y, (180 - angle)/90,1,0,c_white,1)
        draw_sprite_ext(sprite_index, 0, x - lengthdir_x(36,angle),y, (180 - angle)/90,1,0,c_white,1)
        //draw_sprite_ext(sprDoor, 0, x,y,(lengthdir_x(90,angle))/90,1,0,c_white,1);    
        draw_sprite_ext(sprDoor, 0, x,y,(lengthdir_x(36,angle))/36,1,0,c_white,1);    
    }
    else{
        //draw_sprite_ext(sprite_index, 0, x + (lengthdir_x(90,angle)) - (180 - angle) * sprite_width/90,y, (180 - angle)/90,1,0,c_white,1)
        draw_sprite_ext(sprite_index, 0, x + (lengthdir_x(36,angle)) - (180 - angle) * sprite_width/90,y, (180 - angle)/90,1,0,c_white,1);
        //draw_sprite_ext(sprDoor, 0, x,y, -1 * (lengthdir_x(90,angle))/90,1,0,c_white,1);
        draw_sprite_ext(sprDoor, 0, x,y, -1 * (lengthdir_x(36,angle))/36,1,0,c_white,1);
    }
}

if(close){
    if(open)open = 0;
    if(angle &gt; 90 &amp;&amp; angle / spd &gt; 90){angle /= spd;}
    else{
        angle = 90;
        //triggered = 0;
        if(ghostTriggered){
            spd /= 1.5;
        }
    }
    if(dir){
        //draw_sprite_ext(sprite_index, 0, x - lengthdir_x(90,angle),y, (180 - angle)/90,1,0,c_white,1)
        draw_sprite_ext(sprite_index, 0, x - lengthdir_x(36,angle),y, (180 - angle)/90,1,0,c_white,1)
        //draw_sprite_ext(sprDoor, 0, x,y,(lengthdir_x(90,angle))/90,1,0,c_white,1);    
        draw_sprite_ext(sprDoor, 0, x,y,(lengthdir_x(36,angle))/36,1,0,c_white,1);    
    }
    else{
        //draw_sprite_ext(sprite_index, 0, x + (lengthdir_x(90,angle)) - (180 - angle) * sprite_width/90,y, (180 - angle)/90,1,0,c_white,1)
        //draw_sprite_ext(sprDoor, 0, x,y, -1 * (lengthdir_x(90,angle))/90,1,0,c_white,1);
        draw_sprite_ext(sprite_index, 0, x + (lengthdir_x(36,angle)) - (180 - angle) * sprite_width/90,y, (180 - angle)/90,1,0,c_white,1)
        draw_sprite_ext(sprDoor, 0, x,y, -1 * (lengthdir_x(36,angle))/36,1,0,c_white,1);
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
